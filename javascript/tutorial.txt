build in object . cuyo codigo es c , pero se usan en javascript

es un lenguaje basado en objetos ya hexos no es para hacer objetos

las variables de tipo compuesto son objetos

un objeto es una variable que tiene una estructura

estructura-> clase
campo-> atributo
funcion-> metodo 
variable-> objeto
---------------------
---------------------
alumno.nombre----------------------- alumno{"nombre"}
var alumno = {
name:"carlos"
surname:"sanchez"
posibilidades: "buenas"                  "this.loquesea"-- se refiere a esto es.
}

var alumno={
    name:"carlos"
    surname:"sanchez"
    posibilidades:this.surname
}

for(var i in alumno)
    alert(i);

for(var i in alumno)
    alert(i+ ": "+alumno[i]);

si pones  "name in alumno"-->"true" 

if(alumno.name)
    alert("HOLA")

if(alumno["posibilidades"])------------------> esto da 0 por lo tanto false y no saca el hola
    alert("HOLA")
if(alumno.posibilidades)-------> esto dara hola!
    alert("HOLA")

   ////** PARA ESCRIBIR ESTO EN CONSOLA DE FIREFOX CTRL + MAYUS **////



    yo = {name: "Carlos"}

    var a = [1,2,yo]

    var b = [1,yo,3]

    a.[2]= txema
    a.[2]= "jamones"
    b.[1]= jamones                       ///* a.[2] = yo --> [0,1,2] *///

    --------------------------------
    --------------------------------


    var a = 2 
    
    typeof(a)
    "number"

    var a = new Number(2)

    typeof(a)

    "object"

    var b = 2

    b == a 
    
    true 

    -----------------------------------------------
    -----------------------------------------------

    var summary = {}

    function report() {
	val real_letters = 0
	    for(var i=0;i<text.length;i++){
		var letter = text[i]
		    letter = letter.toLowerCase()

		    if( /[a-z]/i.test(letter) ){  //**lee en el conjunto que va de la "a" a la "z"
			real_letters++
			    if(!summary[letter])
				summary[letter]=0
				    summary[letter]++
		    }
	    }
	for (var i in summary)
	    summary[i]=Math.roun(10000 * summary[i]/real_letters)/100
		document.getElementById("es").innerHTML = summary.toSource()
    }



-------------------------------------------------------------
-------------------------------------------------------------
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


Expresiones regulares - son patrones para buscar en el texto.

-+-+-+-+-+-+-+-+-
RUBULAR ->A RUBY REGULAR EXPRESION EDITOR.


\b[^i]+\b        ---> que no me lea las palabras que tienen i . de tal manera que busco el comienzo de la palabra luego una cadena de caracters q contenga la y y busco el final de la palabra.
-+-+-+-+-+-+-+-+-
